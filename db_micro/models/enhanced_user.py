# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from db_micro.models.base_model_ import Model
from db_micro.models.user import User
from db_micro import util


class EnhancedUser(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, first_name: str=None, last_name: str=None, email: str=None, client_id: str=None, address: str=None, user: User=None):  # noqa: E501
        """EnhancedUser - a model defined in Swagger

        :param first_name: The first_name of this EnhancedUser.  # noqa: E501
        :type first_name: str
        :param last_name: The last_name of this EnhancedUser.  # noqa: E501
        :type last_name: str
        :param email: The email of this EnhancedUser.  # noqa: E501
        :type email: str
        :param client_id: The client_id of this EnhancedUser.  # noqa: E501
        :type client_id: str
        :param address: The address of this EnhancedUser.  # noqa: E501
        :type address: str
        :param user: The user of this EnhancedUser.  # noqa: E501
        :type user: User
        """
        self.swagger_types = {
            'first_name': str,
            'last_name': str,
            'email': str,
            'client_id': str,
            'address': str,
            'user': User
        }

        self.attribute_map = {
            'first_name': 'firstName',
            'last_name': 'lastName',
            'email': 'email',
            'client_id': 'clientId',
            'address': 'address',
            'user': 'user'
        }

        self._first_name = first_name
        self._last_name = last_name
        self._email = email
        self._client_id = client_id
        self._address = address
        self._user = user

    @classmethod
    def from_dict(cls, dikt) -> 'EnhancedUser':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The EnhancedUser of this EnhancedUser.  # noqa: E501
        :rtype: EnhancedUser
        """
        return util.deserialize_model(dikt, cls)

    @property
    def first_name(self) -> str:
        """Gets the first_name of this EnhancedUser.


        :return: The first_name of this EnhancedUser.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name: str):
        """Sets the first_name of this EnhancedUser.


        :param first_name: The first_name of this EnhancedUser.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def last_name(self) -> str:
        """Gets the last_name of this EnhancedUser.


        :return: The last_name of this EnhancedUser.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name: str):
        """Sets the last_name of this EnhancedUser.


        :param last_name: The last_name of this EnhancedUser.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def email(self) -> str:
        """Gets the email of this EnhancedUser.


        :return: The email of this EnhancedUser.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this EnhancedUser.


        :param email: The email of this EnhancedUser.
        :type email: str
        """

        self._email = email

    @property
    def client_id(self) -> str:
        """Gets the client_id of this EnhancedUser.


        :return: The client_id of this EnhancedUser.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id: str):
        """Sets the client_id of this EnhancedUser.


        :param client_id: The client_id of this EnhancedUser.
        :type client_id: str
        """

        self._client_id = client_id

    @property
    def address(self) -> str:
        """Gets the address of this EnhancedUser.


        :return: The address of this EnhancedUser.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address: str):
        """Sets the address of this EnhancedUser.


        :param address: The address of this EnhancedUser.
        :type address: str
        """

        self._address = address

    @property
    def user(self) -> User:
        """Gets the user of this EnhancedUser.


        :return: The user of this EnhancedUser.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user: User):
        """Sets the user of this EnhancedUser.


        :param user: The user of this EnhancedUser.
        :type user: User
        """

        self._user = user
